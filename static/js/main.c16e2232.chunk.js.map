{"version":3,"sources":["axios.js","Row.js","Requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","name","onClick","movieTrailer","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixoriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c16e2232.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL : \"https://api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance","import React, { useState,  useEffect } from 'react'\r\nimport axios from './axios'\r\nimport './Row.css'\r\nimport Youtube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([])\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl)\r\n            setMovies(request.data.results)\r\n            return request\r\n        }\r\n        fetchData()\r\n    }, [fetchUrl])\r\n\r\n    const opts = {\r\n        height : \"390\",\r\n        width : \"100%\",\r\n        playerVars : {\r\n            autoplay : 1\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if(trailerUrl) {\r\n            setTrailerUrl(\"\")\r\n        } else {\r\n            movieTrailer(movie?.name || movie?.title || movie?.original_name || \"\")\r\n            .then((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search)\r\n                setTrailerUrl(urlParams.get('v'))\r\n            })\r\n            .catch((error) => console.log(error))\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className = \"row\">\r\n            <h2>{title}</h2>\r\n            <div className = \"row__posters\">\r\n                {movies.map(movie => (\r\n                    <img\r\n                        key = {movie.id}\r\n                        className = {`row__poster ${isLargeRow && \"row__posterLarge\"}`} \r\n                        src = {`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\r\n                        alt = {movie.name}\r\n                        onClick = {() => handleClick(movie)}\r\n                    />\r\n                ))}\r\n                {/* Several row posters */}\r\n            </div>\r\n            {trailerUrl && <Youtube videoId = {trailerUrl} opts = {opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row","const API_KEY = \"015d4d61a781e9ae779f3a8e23a7615a\"\r\n\r\nconst requests = {\r\n    fetchTrending : `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixoriginals : `discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies : `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies : `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies : `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies : `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries : `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\n\r\nexport default requests","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios';\r\nimport requests from './Requests'\r\nimport './Banner.css'\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixoriginals)\r\n            console.log(request.data.results)  // []\r\n            setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)])\r\n            return request\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str\r\n    }\r\n\r\n    return(\r\n        <header\r\n            className = \"banner\" \r\n            style = {{ \r\n                backgroundSize : \"cover\",\r\n                backgroundImage : `url(${base_url}${movie?.backdrop_path})`,\r\n                backgroundPosition : \"center center\"\r\n            }}\r\n        >\r\n            <div className = \"banner__contents\">\r\n                <h1 className = \"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className = \"banner__buttons\">\r\n                    <button className = \"banner__button\">Play</button>\r\n                    <button className = \"banner__button\">My List</button>\r\n                </div>\r\n\r\n                <h1 className = \"banner__description\">{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n\r\n            <div className = \"banner__fadeBottom\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner","import React, { useEffect, useState } from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow] = useState(false)\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", ()=> {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true)\r\n            } else handleShow(false)\r\n        });\r\n        return() => {\r\n            window.removeEventListener(\"scroll\")\r\n        }\r\n    }, [])\r\n\r\n    return(\r\n        <div className = {`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n                className = \"nav__logo\"\r\n                src = \"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n                alt = \"Netflix Logo\"\r\n            />\r\n\r\n            <img \r\n                className = \"nav__avatar\"\r\n                src = \"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n                alt = \"Netflix Avatar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React from 'react';\nimport Row from './Row'\nimport requests from './Requests'\nimport './App.css'\nimport Banner from './Banner'\nimport Nav from './Nav'\n\nfunction App() {\n  return(\n    <div className = \"App\">\n      <Nav />\n      <Banner />\n      <Row isLargeRow title = \"Netflix Originals\" fetchUrl = {requests.fetchNetflixoriginals}/>\n      <Row title = \"Trending Now\" fetchUrl = {requests.fetchTrending}/>\n      <Row title = \"Top Rated\" fetchUrl = {requests.fetchTopRated}/>\n      <Row title = \"Comedy Movies\" fetchUrl = {requests.fetchComedyMovies}/>\n      <Row title = \"Horror Movies\" fetchUrl = {requests.fetchHorrorMovies}/>\n      <Row title = \"Romance Movies\" fetchUrl = {requests.fetchRomanceMovies}/>\n      <Row title = \"Documentaries\" fetchUrl = {requests.fetchDocumentaries}/>\n    </div>\n  )\n}\n\nexport default App\n// 015d4d61a781e9ae779f3a8e23a7615a\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}